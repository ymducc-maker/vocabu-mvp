import React, { useCallback, useEffect, useMemo, useState } from 'react';
import PlacementQuizAdapter from './PlacementQuizAdapter';
import type { PlacementQuizResult, QuizQuestion } from './PlacementQuizAdapter';

/** localStorage keys */
const LS_KEYS = {
  placementResult: 'vocabu.placementResult.v1',
  placementConfig: 'vocabu.placementConfig.v1',
  plan: 'vocabu.plan.v1',
};

/** –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ UI */
const CONTEXTS = [
  { id: 'law', label: '–ü—Ä–∞–≤–æ' },
  { id: 'travel', label: '–¢—É—Ä–∏–∑–º' },
  { id: 'it', label: 'IT' },
  { id: 'senior', label: '60+' },
] as const;

const STYLES = [
  { id: 'simple', label: '–ü—Ä–æ—Å—Ç–æ–π' },
  { id: 'professional', label: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π' },
  { id: 'academic', label: '–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π' },
] as const;

const HORIZONS = [
  { id: 30, label: '30 –¥–Ω–µ–π' },
  { id: 60, label: '60 –¥–Ω–µ–π' },
  { id: 90, label: '90 –¥–Ω–µ–π' },
] as const;

const LANGUAGE_PAIRS = [
  { id: 'en-ru', label: 'EN‚ÜîRU (MVP)' },
  { id: 'en-es', label: 'EN‚ÜîES (–ø–æ—Å–ª–µ MVP)' },
] as const;

type PlacementConfig = {
  context: (typeof CONTEXTS)[number]['id'];
  style: (typeof STYLES)[number]['id'];
  horizon: (typeof HORIZONS)[number]['id'];
  pair: (typeof LANGUAGE_PAIRS)[number]['id'];
  planName?: string;
  comfortMode?: boolean; // –ö–æ–º—Ñ–æ—Ä—Ç 60+ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ senior)
};

type PlanWord = {
  id: string;
  term: string;
  translation: string;
  source: string;
};

type Plan = {
  createdAt: number;
  context: PlacementConfig['context'];
  style: PlacementConfig['style'];
  pair: PlacementConfig['pair'];
  horizon: PlacementConfig['horizon'];
  name?: string;
  recommendation: { perDay: number; perWeek: number; total: number };
  todaySet: PlanWord[];
  pool: PlanWord[];
  comfortMode?: boolean;
};

function readLS<T>(key: string): T | null {
  try {
    const raw = localStorage.getItem(key);
    if (!raw) return null;
    return JSON.parse(raw) as T;
  } catch {
    return null;
  }
}
function writeLS<T>(key: string, val: T) {
  try {
    localStorage.setItem(key, JSON.stringify(val));
  } catch {}
}

/** –†–µ–∫–æ–º–º–µ–Ω–¥–∞—Ü–∏—è —Ç–µ–º–ø–∞ */
function computeRecommendation(
  level: 'A2' | 'B1' | 'B2',
  horizon: number,
  comfort?: boolean
) {
  const base = level === 'A2' ? 8 : level === 'B1' ? 12 : 16;
  const factor = horizon === 30 ? 1.2 : horizon === 60 ? 1.0 : 0.85;
  let perDay = Math.max(5, Math.round(base * factor));
  if (comfort) perDay = Math.max(5, Math.min(8, perDay)); // –º—è–≥–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω 5‚Äì8
  return { perDay, perWeek: perDay * 7, total: perDay * horizon };
}

/** 15 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî fallback-–±–∞–Ω–∫–∏ */
const Q = {
  law: [
    ['contract', '–¥–æ–≥–æ–≤–æ—Ä'],
    ['judge', '—Å—É–¥—å—è'],
    ['evidence', '–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ'],
    ['lawsuit', '–∏—Å–∫'],
    ['defendant', '–æ—Ç–≤–µ—Ç—á–∏–∫'],
    ['plaintiff', '–∏—Å—Ç–µ—Ü'],
    ['verdict', '–≤–µ—Ä–¥–∏–∫—Ç'],
    ['appeal', '–∞–ø–µ–ª–ª—è—Ü–∏—è'],
    ['fine', '—à—Ç—Ä–∞—Ñ'],
    ['trial', '—Å—É–¥–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å'],
    ['witness', '—Å–≤–∏–¥–µ—Ç–µ–ª—å'],
    ['clause', '–ø—É–Ω–∫—Ç (–¥–æ–≥–æ–≤–æ—Ä–∞)'],
    ['liability', '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å'],
    ['settlement', '—É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ'],
    ['copyright', '–∞–≤—Ç–æ—Ä—Å–∫–æ–µ –ø—Ä–∞–≤–æ'],
  ],
  travel: [
    ['boarding pass', '–ø–æ—Å–∞–¥–æ—á–Ω—ã–π —Ç–∞–ª–æ–Ω'],
    ['reservation', '–±—Ä–æ–Ω—å'],
    ['departure', '–≤—ã–ª–µ—Ç'],
    ['arrival', '–ø—Ä–∏–ª–µ—Ç'],
    ['customs', '—Ç–∞–º–æ–∂–Ω—è'],
    ['luggage', '–±–∞–≥–∞–∂'],
    ['gate', '–≤—ã—Ö–æ–¥ –Ω–∞ –ø–æ—Å–∞–¥–∫—É'],
    ['transfer', '–ø–µ—Ä–µ—Å–∞–¥–∫–∞'],
    ['visa', '–≤–∏–∑–∞'],
    ['currency exchange', '–æ–±–º–µ–Ω –≤–∞–ª—é—Ç—ã'],
    ['itinerary', '–º–∞—Ä—à—Ä—É—Ç'],
    ['delayed', '–∑–∞–¥–µ—Ä–∂–∞–Ω'],
    ['check-in', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'],
    ['security', '–¥–æ—Å–º–æ—Ç—Ä'],
    ['terminal', '—Ç–µ—Ä–º–∏–Ω–∞–ª'],
  ],
  it: [
    ['deployment', '—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ'],
    ['middleware', '–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –ü–û'],
    ['version control', '—Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π'],
    ['commit', '–∫–æ–º–º–∏—Ç'],
    ['branch', '–≤–µ—Ç–∫–∞'],
    ['merge', '—Å–ª–∏—è–Ω–∏–µ'],
    ['build', '—Å–±–æ—Ä–∫–∞'],
    ['dependency', '–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å'],
    ['endpoint', '–∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞'],
    ['API', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è'],
    ['database', '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'],
    ['query', '–∑–∞–ø—Ä–æ—Å'],
    ['cache', '–∫—ç—à'],
    ['latency', '–∑–∞–¥–µ—Ä–∂–∫–∞'],
    ['scalability', '–º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å'],
  ],
  /** –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è 60+ (–Ω–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π) */
  senior: [
    // üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –¥–æ—Å—É–≥
    ['museum', '–º—É–∑–µ–π'],
    ['guide', '—ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥'],
    ['reservation', '–±—Ä–æ–Ω—å'],
    // üì± –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    ['smartphone', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω'],
    ['message', '—Å–æ–æ–±—â–µ–Ω–∏–µ'],
    ['password', '–ø–∞—Ä–æ–ª—å'],
    // üè° –ë—ã—Ç –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å
    ['grocery', '–ø—Ä–æ–¥—É–∫—Ç—ã'],
    ['neighbour', '—Å–æ—Å–µ–¥'],
    ['repair', '—Ä–µ–º–æ–Ω—Ç'],
    // üí¨ –û–±—â–µ–Ω–∏–µ –∏ —Å–µ–º—å—è
    ['grandchildren', '–≤–Ω—É–∫–∏'],
    ['celebrate', '–ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å'],
    ['invitation', '–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ'],
    // üß† –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ
    ['memory', '–ø–∞–º—è—Ç—å'],
    ['course', '–∫—É—Ä—Å'],
    ['language', '—è–∑—ã–∫'],
  ],
} as const;

function bankFor(context: PlacementConfig['context']): QuizQuestion[] {
  return Q[context].map(([prompt, answer], i) => ({
    id: `${context}-${i}`,
    prompt,
    answer,
    options: undefined,
    translation: answer,
    hint: undefined,
  }));
}

/** –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ */
function extractUserWords(raw: string): PlanWord[] {
  const lines = raw
    .split(/\r?\n/)
    .map((s) => s.trim())
    .filter(Boolean);
  const out: PlanWord[] = [];
  const seen = new Set<string>();
  lines.forEach((line, i) => {
    const parts = line.split(/\s*[-‚Äî:;|]\s+|\t/);
    const term = (parts[0] ?? '').trim();
    const tr = (parts.slice(1).join(' ') || '').trim();
    if (!term) return;
    const id = `${term.toLowerCase()}-${i}`;
    if (seen.has(id)) return;
    seen.add(id);
    out.push({ id, term, translation: tr, source: 'userText' });
  });
  return out;
}

/** UI –∫—É—Å–æ—á–∫–∏ */
const InfoNote: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <div className="vocabu-note">{children}</div>
);
const Section: React.FC<{ title: string; children: React.ReactNode }> = ({
  title,
  children,
}) => (
  <section className="vocabu-section">
    <h3 className="vocabu-section__title">{title}</h3>
    <div>{children}</div>
  </section>
);

const ResultCard: React.FC<{
  result: PlacementQuizResult;
  horizon: number;
  comfort: boolean;
}> = ({ result, horizon, comfort }) => {
  const rec = computeRecommendation(result.level, horizon, comfort);
  const mistakes = result.mistakes.slice(0, 5);
  return (
    <div className="vocabu-result">
      <div className="vocabu-result__header">
        <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–Ω–∏-—Ç–µ—Å—Ç–∞</h3>
        <span className="badge">–ì–æ—Ç–æ–≤–æ</span>
      </div>

      <div className="vocabu-result__grid">
        <div className="vocabu-result__metric">
          <div className="vocabu-result__metric-label">–£—Ä–æ–≤–µ–Ω—å</div>
          <div className="vocabu-result__metric-value">{result.level}</div>
        </div>
        <div className="vocabu-result__metric">
          <div className="vocabu-result__metric-label">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
          <div className="vocabu-result__metric-value">
            {(result.confidence * 100).toFixed(0)}%
          </div>
        </div>
        <div className="vocabu-result__metric">
          <div className="vocabu-result__metric-label">–°—á—ë—Ç</div>
          <div className="vocabu-result__metric-value">
            {result.correct} / {result.total}
          </div>
        </div>
        <div className="vocabu-result__metric">
          <div className="vocabu-result__metric-label">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</div>
          <div className="vocabu-result__metric-value">
            {rec.perDay}/–¥–µ–Ω—å ¬∑ {rec.perWeek}/–Ω–µ–¥ ¬∑ {rec.total}/–∏—Ç–æ–≥–æ
          </div>
        </div>
      </div>

      {mistakes.length > 0 && (
        <div className="vocabu-result__mistakes">
          <div className="vocabu-result__mistakes-title">–ö–ª—é—á–µ–≤—ã–µ –æ—à–∏–±–∫–∏</div>
          <ul>
            {mistakes.map((m) => (
              <li key={m.id}>
                <b>{m.prompt}</b> ‚Üí ‚Äú{m.answer}‚Äù{' '}
                {m.user && m.user !== m.answer ? `(–≤–∞—à: ‚Äú${m.user}‚Äù)` : ''}
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default function PlacementStep() {
  const [config, setConfig] = useState<PlacementConfig>(
    () =>
      readLS<PlacementConfig>(LS_KEYS.placementConfig) ?? {
        context: 'travel',
        style: 'simple',
        horizon: 60,
        pair: 'en-ru',
        planName: '',
        comfortMode: false,
      }
  );
  const [userText, setUserText] = useState<string>('');
  const [questions, setQuestions] = useState<QuizQuestion[] | null>(null);
  const [isTesting, setIsTesting] = useState(false);
  const [result, setResult] = useState<PlacementQuizResult | null>(() =>
    readLS<PlacementQuizResult>(LS_KEYS.placementResult)
  );
  const [plan, setPlan] = useState<Plan | null>(() =>
    readLS<Plan>(LS_KEYS.plan)
  );

  useEffect(() => {
    writeLS(LS_KEYS.placementConfig, config);
  }, [config]);

  // —Å–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ø–ª–∞–Ω–∞ –∏–∑ localStorage (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
  useEffect(() => {
    const id = setInterval(() => {
      const p = readLS<Plan>(LS_KEYS.plan);
      setPlan((prev) =>
        JSON.stringify(prev) !== JSON.stringify(p) ? p : prev
      );
    }, 800);
    return () => clearInterval(id);
  }, []);

  const loadQ = useCallback(async () => {
    // 15 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö
    const base = bankFor(config.context);
    const picked = shuffle(base).slice(0, 15);
    setQuestions(picked);
  }, [config.context]);

  const onStartTest = async () => {
    await loadQ();
    setIsTesting(true);
    setResult(null);
  };

  const onTestComplete = (res: PlacementQuizResult) => {
    setResult(res);
    writeLS(LS_KEYS.placementResult, res);
    setIsTesting(false);
  };

  /** –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω (–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ + –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å) */
  const buildPlanCombined = useCallback(() => {
    const fromTest: PlanWord[] = result
      ? result.details.map((d, i) => ({
          id: d.id ?? `${d.prompt}-${i}`,
          term: d.prompt,
          translation: d.answer,
          source: 'placement',
        }))
      : [];
    const fromUser = extractUserWords(userText);

    if (fromTest.length === 0 && fromUser.length === 0) return null; // –Ω–µ—á–µ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å

    // –°–∫–ª–µ–∏–≤–∞–µ–º –±–µ–∑ –¥—É–±–ª–µ–π –ø–æ term+translation
    const unique: PlanWord[] = [];
    const seen = new Set<string>();
    const add = (w: PlanWord) => {
      const key = `${w.term.toLowerCase()}|${(
        w.translation || ''
      ).toLowerCase()}`;
      if (seen.has(key)) return;
      seen.add(key);
      unique.push(w);
    };
    fromTest.forEach(add);
    fromUser.forEach(add);

    const rec = computeRecommendation(
      result ? result.level : 'B1',
      config.horizon,
      config.comfortMode
    );
    const todaySet = unique.slice(0, Math.min(10, unique.length));
    const newPlan: Plan = {
      createdAt: Date.now(),
      context: config.context,
      style: config.style,
      pair: config.pair,
      horizon: config.horizon,
      name: config.planName,
      recommendation: rec,
      todaySet,
      pool: unique,
      comfortMode: !!config.comfortMode,
    };
    writeLS(LS_KEYS.plan, newPlan);
    setPlan(newPlan);
    // —É–≤–µ–¥–æ–º–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Å–ª—É—à–∞–µ—Ç)
    window.dispatchEvent(
      new CustomEvent('vocabu:navigate', { detail: { step: 'placement' } })
    );
    return newPlan;
  }, [config, result, userText]);

  const updateConfig = <K extends keyof PlacementConfig>(
    key: K,
    val: PlacementConfig[K]
  ) => setConfig((prev) => ({ ...prev, [key]: val }));

  const isSenior = config.context === 'senior';

  return (
    <div className="placement">
      <h2 className="placement__title">–ü–ª–∞–Ω –∏ –ü–ª–µ–π—Å–º–µ–Ω—Ç</h2>

      <Section title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∞">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-12">
          <div>
            <label className="label">–ö–æ–Ω—Ç–µ–∫—Å—Ç</label>
            <div className="chips">
              {CONTEXTS.map((c) => (
                <button
                  key={c.id}
                  className={`chip ${
                    config.context === c.id ? 'chip--active' : ''
                  }`}
                  aria-pressed={config.context === c.id}
                  onClick={() => updateConfig('context', c.id)}
                >
                  {c.label}
                </button>
              ))}
            </div>

            <label className="label mt16">–°—Ç–∏–ª—å</label>
            <div className="chips">
              {STYLES.map((s) => (
                <button
                  key={s.id}
                  className={`chip ${
                    config.style === s.id ? 'chip--active' : ''
                  }`}
                  aria-pressed={config.style === s.id}
                  onClick={() => updateConfig('style', s.id)}
                >
                  {s.label}
                </button>
              ))}
            </div>

            {isSenior && (
              <div className="card" style={{ marginTop: 12 }}>
                <div style={{ fontWeight: 700, marginBottom: 6 }}>
                  –ö–æ–º—Ñ–æ—Ä—Ç 60+
                </div>
                <label
                  style={{ display: 'flex', alignItems: 'center', gap: 8 }}
                >
                  <input
                    type="checkbox"
                    checked={!!config.comfortMode}
                    onChange={(e) =>
                      updateConfig('comfortMode', e.target.checked)
                    }
                  />
                  –ú—è–≥–∫–∏–π —Ç–µ–º–ø –∏ —É–¥–æ–±—Å—Ç–≤–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è (3 –≤–∞—Ä–∏–∞–Ω—Ç–∞, –ø–æ–¥—Å–∫–∞–∑–∫–∏,
                  –º—è–≥–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã)
                </label>
              </div>
            )}
          </div>

          <div>
            <label className="label">–ì–æ—Ä–∏–∑–æ–Ω—Ç</label>
            <div className="chips">
              {HORIZONS.map((h) => (
                <button
                  key={h.id}
                  className={`chip ${
                    config.horizon === h.id ? 'chip--active' : ''
                  }`}
                  aria-pressed={config.horizon === h.id}
                  onClick={() => updateConfig('horizon', h.id)}
                >
                  {h.label}
                </button>
              ))}
            </div>

            <label className="label mt16">–ü–∞—Ä–∞ —è–∑—ã–∫–æ–≤</label>
            <div className="chips">
              {LANGUAGE_PAIRS.map((p) => (
                <button
                  key={p.id}
                  className={`chip ${
                    config.pair === p.id ? 'chip--active' : ''
                  }`}
                  aria-pressed={config.pair === p.id}
                  onClick={() => updateConfig('pair', p.id)}
                >
                  {p.label}
                </button>
              ))}
            </div>
            {config.pair === 'en-es' && (
              <InfoNote>
                EN‚ÜîES –¥–æ–±–∞–≤–∏–º –ø–æ—Å–ª–µ MVP; —Å–µ–π—á–∞—Å —Ç–µ—Å—Ç –∏ –ø–ª–∞–Ω —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –¥–ª—è
                EN‚ÜîRU (—ç—Ç–æ –æ–∫).
              </InfoNote>
            )}
          </div>
        </div>
      </Section>

      {!isTesting && !result && (
        <Section title="–ú–∏–Ω–∏-—Ç–µ—Å—Ç (15 –≤–æ–ø—Ä–æ—Å–æ–≤)">
          <div className="flex-row gap8">
            <button className="btn btn-primary" onClick={onStartTest}>
              –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
            </button>
            <span className="muted">
              –û–ø—Ä–µ–¥–µ–ª–∏–º —É—Ä–æ–≤–µ–Ω—å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º —Ç–µ–º–ø —Å–ª–æ–≤ –≤ –¥–µ–Ω—å.
            </span>
          </div>
        </Section>
      )}

      {isTesting && questions && (
        <PlacementQuizAdapter
          questions={questions}
          onComplete={onTestComplete}
          comfortMode={!!config.comfortMode && isSenior}
        />
      )}

      {!isTesting && result && (
        <ResultCard
          result={result}
          horizon={config.horizon}
          comfort={!!config.comfortMode && isSenior}
        />
      )}

      <Section title="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç/–Ω–∞–±–æ—Ä —Å–ª–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)">
        <div className="muted">
          –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç (—Å–ª–æ–≤–∞ –ø–æ —Ç–µ–º–µ) –∏–ª–∏ –≥–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ
          —Å–ª–µ–¥—É–µ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç—å. –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫: <code>term - –ø–µ—Ä–µ–≤–æ–¥</code>,{' '}
          <code>term ‚Äî –ø–µ—Ä–µ–≤–æ–¥</code>, <code>term: –ø–µ—Ä–µ–≤–æ–¥</code> –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ
          —Å–ª–æ–≤–æ.
        </div>
        <textarea
          className="textarea"
          rows={6}
          value={userText}
          onChange={(e) => setUserText(e.target.value)}
          placeholder={`–ù–∞–ø—Ä.:\nairport - –∞—ç—Ä–æ–ø–æ—Ä—Ç\ncheck-in - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\nsecurity - –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å`}
        />
        <div className="buttonsRow" style={{ marginTop: 8 }}>
          <button
            className="btn btn-secondary"
            onClick={buildPlanCombined}
            disabled={!result && userText.trim().length === 0}
            title={
              !result && userText.trim().length === 0
                ? '–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤'
                : '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏/–∏–ª–∏ —Å–ø–∏—Å–∫—É'
            }
          >
            –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω
          </button>
        </div>
      </Section>

      {/* –ò—Ç–æ–≥ —à–∞–≥–∞: –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–ª–∞–Ω–∞ + –∏–º—è + –∫–Ω–æ–ø–∫–∞ */}
      <Section title="–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω">
        {plan ? (
          <div className="card" style={{ marginBottom: 12 }}>
            <div className="line">
              <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</b> {String(plan.context).toUpperCase()} ¬∑{' '}
              <b>–ü–∞—Ä–∞:</b> {plan.pair}
              {plan.comfortMode ? ' ¬∑ –ö–æ–º—Ñ–æ—Ä—Ç 60+' : ''}
            </div>
            <div className="line">
              <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> {plan.recommendation.perDay} –≤ –¥–µ–Ω—å ¬∑{' '}
              {plan.recommendation.perWeek} –≤ –Ω–µ–¥–µ–ª—é ¬∑{' '}
              {plan.recommendation.total} –≤—Å–µ–≥–æ
            </div>
            <div className="line">
              <b>–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –Ω–∞–±–æ—Ä:</b> {plan.todaySet?.length ?? 0} —Å–ª–æ–≤
            </div>
          </div>
        ) : (
          <div className="muted" style={{ marginBottom: 12 }}>
            –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ –∏/–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –ø–ª–∞–Ω, –∏ –∑–¥–µ—Å—å
            –ø–æ—è–≤–∏—Ç—Å—è –∏—Ç–æ–≥.
          </div>
        )}

        <label className="label">
          –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞)
        </label>
        <input
          className="input"
          value={config.planName ?? ''}
          onChange={(e) => updateConfig('planName', e.target.value)}
          placeholder="–ù–∞–ø—Ä.: –ü—Ä–∞–≤–æ 60 –¥–Ω–µ–π –ø—Ä–æ—Ñ."
        />
        <div className="buttonsRow" style={{ marginTop: 8 }}>
          <button
            className="btn btn-primary"
            onClick={() =>
              window.dispatchEvent(
                new CustomEvent('vocabu:navigate', {
                  detail: { step: 'review' },
                })
              )
            }
          >
            –ù–∞—á–∞—Ç—å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Üí
          </button>
        </div>
      </Section>
    </div>
  );
}

function shuffle<T>(a: T[]): T[] {
  const arr = [...a];
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
}
