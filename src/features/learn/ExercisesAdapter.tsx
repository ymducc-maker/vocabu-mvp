import React, { useMemo, useState } from 'react';
import type { Plan, UILocale } from '../../types';

type Props = {
  plan: Plan | null;
  onComplete: () => void;
  locale?: UILocale;
};

type TaskKind = 'flip' | 'mcq' | 'type';
type Task = { kind: TaskKind; word: string };

/* -------------------- –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è -------------------- */
const LANG = {
  ru: {
    progress: '–ü—Ä–æ–≥—Ä–µ—Å—Å',
    next: '–î–∞–ª–µ–µ',
    finish: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∏–Ω–∏-—Å–µ—Å—Å–∏—é',
    flip_front:
      '–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Å–ª–æ–≤–æ –∏ –º—ã—Å–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–∏. –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç.',
    flip_back: '–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.',
    mcq_title: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ',
    type_title: '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –ø–æ –±—É–∫–≤–∞–º',
    check: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å',
    correct: '–í–µ—Ä–Ω–æ!',
    wrongStrict: '–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:',
    trans: '–ü–µ—Ä–µ–≤–æ–¥',
    maskHint: '–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –±—É–∫–≤–∞–º',
    show_answer: '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç',
    speakingSoon_title: 'üó£Ô∏è Speaking ‚Äî —Å–∫–æ—Ä–æ',
    speakingSoon_text:
      '–í —Å–ª–µ–¥—É—é—â–µ–º —Ä–µ–ª–∏–∑–µ –¥–æ–±–∞–≤–∏–º –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞ –∏ –±–∞–∑–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è. –°–µ–π—á–∞—Å ‚Äî —á—Ç–µ–Ω–∏–µ –∏ –ø–∏—Å—å–º–æ, —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–ª–æ–≤–∞.',
    result_excellent: '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!',
    result_good: '–•–æ—Ä–æ—à–æ! –ï—Å—Ç—å, —á—Ç–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å.',
    result_needwork: (c: number, t: number) =>
      `–ó–∞–∫—Ä–µ–ø–∏–º —Å–ª–æ–≤–∞: –≤–µ—Ä–Ω–æ ${c} –∏–∑ ${t}.`,
  },
  en: {
    progress: 'Progress',
    next: 'Next',
    finish: 'Finish mini-session',
    flip_front: 'Look at the word and recall the meaning. Tap to reveal.',
    flip_back: 'Nice! Go to the next one.',
    mcq_title: 'Choose the correct word',
    type_title: 'Type the word',
    check: 'Check',
    correct: 'Correct!',
    wrongStrict: 'Incorrect. Correct answer:',
    trans: 'Meaning',
    maskHint: 'Letter hint',
    show_answer: 'Show answer',
    speakingSoon_title: 'üó£Ô∏è Speaking ‚Äî coming soon',
    speakingSoon_text:
      'Voice recording and basic pronunciation feedback arrive in the next release. For now: reading & typing to lock in vocabulary.',
    result_excellent: 'Excellent!',
    result_good: 'Good! There‚Äôs room to improve.',
    result_needwork: (c: number, t: number) =>
      `Let‚Äôs reinforce: correct ${c} of ${t}.`,
  },
};

/* -------------------- –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º -------------------- */
const HINTS: Record<string, Record<string, { ru: string; en: string }>> = {
  travel: {
    ticket: { ru: '–±–∏–ª–µ—Ç', en: 'ticket' },
    flight: { ru: '—Ä–µ–π—Å, –ø–µ—Ä–µ–ª—ë—Ç', en: 'flight (plane)' },
    gate: { ru: '–≤—ã—Ö–æ–¥ –Ω–∞ –ø–æ—Å–∞–¥–∫—É', en: 'boarding gate' },
    luggage: { ru: '–±–∞–≥–∞–∂', en: 'luggage' },
    passport: { ru: '–ø–∞—Å–ø–æ—Ä—Ç', en: 'passport' },
    visa: { ru: '–≤–∏–∑–∞', en: 'visa' },
    hotel: { ru: '–æ—Ç–µ–ª—å', en: 'hotel' },
    taxi: { ru: '—Ç–∞–∫—Å–∏', en: 'taxi' },
    bus: { ru: '–∞–≤—Ç–æ–±—É—Å', en: 'bus' },
    train: { ru: '–ø–æ–µ–∑–¥', en: 'train' },
    map: { ru: '–∫–∞—Ä—Ç–∞', en: 'map' },
    museum: { ru: '–º—É–∑–µ–π', en: 'museum' },
    beach: { ru: '–ø–ª—è–∂', en: 'beach' },
    restaurant: { ru: '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', en: 'restaurant' },
    breakfast: { ru: '–∑–∞–≤—Ç—Ä–∞–∫', en: 'breakfast' },
    boarding: { ru: '–ø–æ—Å–∞–¥–∫–∞', en: 'boarding' },
    delayed: { ru: '–∑–∞–¥–µ—Ä–∂–∞–Ω', en: 'delayed' },
  },
  law: {
    court: { ru: '—Å—É–¥', en: 'court' },
    judge: { ru: '—Å—É–¥—å—è', en: 'judge' },
    lawyer: { ru: '–∞–¥–≤–æ–∫–∞—Ç', en: 'lawyer' },
    plaintiff: { ru: '–∏—Å—Ç–µ—Ü', en: 'plaintiff' },
    defendant: { ru: '–æ—Ç–≤–µ—Ç—á–∏–∫', en: 'defendant' },
    evidence: { ru: '–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ', en: 'evidence' },
    verdict: { ru: '–≤–µ—Ä–¥–∏–∫—Ç', en: 'verdict' },
    appeal: { ru: '–∞–ø–µ–ª–ª—è—Ü–∏—è', en: 'appeal' },
    contract: { ru: '–¥–æ–≥–æ–≤–æ—Ä', en: 'contract' },
    rights: { ru: '–ø—Ä–∞–≤–∞', en: 'rights' },
  },
  it: {
    server: { ru: '—Å–µ—Ä–≤–µ—Ä', en: 'server' },
    client: { ru: '–∫–ª–∏–µ–Ω—Ç', en: 'client' },
    database: { ru: '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', en: 'database' },
    query: { ru: '–∑–∞–ø—Ä–æ—Å', en: 'query' },
    bug: { ru: '–æ—à–∏–±–∫–∞', en: 'bug' },
    deploy: { ru: '–≤—ã–∫–∞—Ç–∫–∞', en: 'deploy' },
    cloud: { ru: '–æ–±–ª–∞–∫–æ', en: 'cloud' },
    repository: { ru: '—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π', en: 'repository' },
    commit: { ru: '–∫–æ–º–º–∏—Ç', en: 'commit' },
    branch: { ru: '–≤–µ—Ç–∫–∞', en: 'branch' },
  },
  senior: {
    clinic: { ru: '–ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞', en: 'clinic' },
    appointment: { ru: '–∑–∞–ø–∏—Å—å (–Ω–∞ –ø—Ä–∏—ë–º)', en: 'appointment' },
    insurance: { ru: '—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞', en: 'insurance' },
    pension: { ru: '–ø–µ–Ω—Å–∏—è', en: 'pension' },
    pharmacy: { ru: '–∞–ø—Ç–µ–∫–∞', en: 'pharmacy' },
    benefits: { ru: '–ª—å–≥–æ—Ç—ã', en: 'benefits' },
    schedule: { ru: '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', en: 'schedule' },
  },
};

/* -------------------- –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ -------------------- */
const LOG_KEY = 'vocabu_learn_log_v1';

function todayISO() {
  const d = new Date();
  d.setHours(0, 0, 0, 0);
  return d.toISOString().slice(0, 10);
}

function shuffle<T>(arr: T[]): T[] {
  return [...arr].sort(() => Math.random() - 0.5);
}

function makeTypos(word: string): string[] {
  const lower = word.toLowerCase();
  const variants = new Set<string>();
  if (lower.length >= 4) {
    const i = Math.floor(1 + Math.random() * Math.max(1, lower.length - 3));
    variants.add(
      lower.slice(0, i) + lower[i + 1] + lower[i] + lower.slice(i + 2)
    );
  }
  const letters = 'abcdefghijklmnopqrstuvwxyz';
  const j = Math.floor(Math.random() * Math.max(1, lower.length - 1));
  variants.add(
    lower.slice(0, j) +
      letters[Math.floor(Math.random() * letters.length)] +
      lower.slice(j + 1)
  );
  if (variants.size < 2) {
    const k = Math.floor(Math.random() * (lower.length + 1));
    variants.add(
      lower.slice(0, k) +
        letters[Math.floor(Math.random() * letters.length)] +
        lower.slice(k)
    );
  }
  const out = Array.from(variants).filter((v) => v !== lower);
  return out.slice(0, 2);
}

function jiggle(word: string) {
  const lower = word.toLowerCase();
  if (lower.length < 3) return lower + lower[lower.length - 1];
  const i = Math.max(1, Math.min(lower.length - 2, 2));
  return lower.slice(0, i) + lower[i + 1] + lower[i] + lower.slice(i + 2);
}

function mask(word: string) {
  if (word.length <= 2) return word;
  return `${word[0]}${'‚Ä¢'.repeat(Math.max(1, word.length - 2))}${
    word[word.length - 1]
  }`;
}

function getHintParts(word: string, context: string, locale: UILocale) {
  const entry = HINTS[context]?.[word.toLowerCase()];
  const trans = entry ? (locale === 'ru' ? entry.ru : entry.en) : '';
  const m = mask(word);
  return { trans, mask: m };
}

/** –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞ –¥–µ–Ω—å –ø–æ —Å–ª–æ–≤—É */
function logQuality(word: string, quality: 0 | 3 | 4 | 5) {
  try {
    const raw = localStorage.getItem(LOG_KEY);
    const today = todayISO();
    let data: { date: string; items: Record<string, number> } = raw
      ? JSON.parse(raw)
      : { date: today, items: {} };
    if (data.date !== today) data = { date: today, items: {} };
    const key = String(word).toLowerCase();
    const prev = data.items[key] ?? -1;
    data.items[key] = Math.max(prev, quality);
    localStorage.setItem(LOG_KEY, JSON.stringify(data));
  } catch {}
}

function resultText(locale: UILocale, correct: number, total: number) {
  const l = LANG[locale] ?? LANG.ru;
  const r = total > 0 ? correct / total : 0;
  if (r >= 0.85) return l.result_excellent;
  if (r >= 0.6) return l.result_good;
  return l.result_needwork(correct, total);
}

/* -------------------- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç -------------------- */
export default function ExercisesAdapter({
  plan,
  onComplete,
  locale = 'ru',
}: Props) {
  const t = LANG[locale] ?? LANG.ru;
  const context = plan?.contextId ?? 'travel';

  const words = useMemo(() => {
    const set = plan?.todaySet?.length
      ? plan!.todaySet
      : ['ticket', 'flight', 'gate', 'luggage', 'hotel', 'taxi', 'map'];
    return set.slice(0, Math.min(8, set.length));
  }, [plan]);

  const tasks: Task[] = useMemo(() => {
    const kinds: TaskKind[] = ['flip', 'mcq', 'type'];
    return words.map((w, i) => ({ word: w, kind: kinds[i % kinds.length] }));
  }, [words]);

  const [idx, setIdx] = useState(0);
  const [correct, setCorrect] = useState(0);
  const [done, setDone] = useState(false);

  const total = tasks.length;
  const task = tasks[idx];

  const next = () => {
    if (idx + 1 >= total) setDone(true);
    else setIdx((v) => v + 1);
  };
  const mark = (ok: boolean) => {
    if (ok) setCorrect((v) => v + 1);
    next();
  };

  if (!task && !done) {
    return (
      <div className="p-4 rounded-2xl border bg-white">
        <div className="text-sm">–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏</div>
        <button
          className="mt-3 px-4 py-2 rounded-xl bg-blue-600 text-white"
          onClick={onComplete}
        >
          {t.finish}
        </button>
      </div>
    );
  }

  if (done) {
    return (
      <div className="p-5 rounded-2xl border bg-white space-y-3">
        <div className="text-lg font-semibold">
          {resultText(locale || 'ru', correct, total)}
        </div>
        <div className="text-sm text-gray-700">
          –í–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct} –∏–∑ {total}.
        </div>
        <button
          className="px-4 py-2 rounded-xl bg-blue-600 text-white"
          onClick={onComplete}
        >
          {t.finish}
        </button>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ü–ª–∞—à–∫–∞ "Speaking ‚Äî —Å–∫–æ—Ä–æ" —Å —è–≤–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º —Å–Ω–∏–∑—É */}
      <div className="p-4 rounded-2xl border bg-white shadow-sm">
        <div className="text-sm font-medium">{t.speakingSoon_title}</div>
        <div className="text-xs text-gray-600 mt-1">{t.speakingSoon_text}</div>
      </div>

      <div className="text-xs text-gray-500">
        {t.progress}: {idx + 1}/{total}
      </div>

      {task.kind === 'flip' && (
        <FlipCard
          word={task.word}
          t={t}
          onNext={() => {
            logQuality(task.word, 3);
            next();
          }} // Flip ‚Üí Hard(3)
        />
      )}

      {task.kind === 'mcq' && (
        <MCQ
          word={task.word}
          hintParts={getHintParts(task.word, context, locale || 'ru')}
          t={t}
          onAnswer={(ok) => {
            logQuality(task.word, ok ? 4 : 0);
            mark(ok);
          }} // MCQ: Good(4) / Again(0)
        />
      )}

      {task.kind === 'type' && (
        <TypeIn
          word={task.word}
          hintParts={getHintParts(task.word, context, locale || 'ru')}
          t={t}
          onAnswer={(ok) => {
            logQuality(task.word, ok ? 5 : 0);
            mark(ok);
          }} // Type: Easy(5) / Again(0)
        />
      )}
    </div>
  );
}

/* -------------------- Sub-components -------------------- */

function FlipCard({
  word,
  t,
  onNext,
}: {
  word: string;
  t: (typeof LANG)['ru'];
  onNext: () => void;
}) {
  const [revealed, setRevealed] = useState(false);
  return (
    <div className="p-4 rounded-2xl border bg-white">
      {!revealed ? (
        <div className="space-y-3">
          <div className="text-sm text-gray-600">{t.flip_front}</div>
          <div className="text-2xl font-semibold">{word}</div>
          <button
            className="px-3 py-2 rounded-xl bg-blue-600 text-white"
            onClick={() => setRevealed(true)}
          >
            {t.show_answer}
          </button>
        </div>
      ) : (
        <div className="space-y-3">
          <div className="text-2xl font-semibold">{word}</div>
          <div className="text-sm text-gray-600">{t.flip_back}</div>
          <button className="px-3 py-2 rounded-xl border" onClick={onNext}>
            {t.next}
          </button>
        </div>
      )}
    </div>
  );
}

function MCQ({
  word,
  hintParts,
  t,
  onAnswer,
}: {
  word: string;
  hintParts: { trans: string; mask: string };
  t: (typeof LANG)['ru'];
  onAnswer: (ok: boolean) => void;
}) {
  // ‚â• 3 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—Å–µ–≥–¥–∞
  const base = [word.toLowerCase(), ...makeTypos(word)];
  while (base.length < 3) base.push(jiggle(word));
  const options = useMemo(() => shuffle(Array.from(new Set(base))), [word]);

  const [picked, setPicked] = useState<string | null>(null);
  const [checked, setChecked] = useState(false);
  const ok = picked === word.toLowerCase();

  return (
    <div className="p-4 rounded-2xl border bg-white space-y-3">
      <div className="text-sm font-medium">{t.mcq_title}</div>
      <div className="text-xs text-gray-600">
        {hintParts.trans && (
          <div>
            <span className="font-medium">{t.trans}:</span> {hintParts.trans}
          </div>
        )}
        <div>
          <span className="font-medium">{t.maskHint}:</span> {hintParts.mask}
        </div>
      </div>

      <div className="grid md:grid-cols-3 gap-2">
        {options.map((o, i) => (
          <button
            key={i}
            onClick={() => setPicked(o)}
            className={
              'px-3 py-2 rounded-xl border text-left ' +
              (picked === o ? 'bg-blue-600 text-white' : 'bg-white')
            }
          >
            {o}
          </button>
        ))}
      </div>

      {!checked ? (
        <button
          disabled={!picked}
          className={
            'px-3 py-2 rounded-xl ' +
            (!picked ? 'bg-gray-200 text-gray-500' : 'bg-blue-600 text-white')
          }
          onClick={() => setChecked(true)}
        >
          {t.check}
        </button>
      ) : (
        <div className="space-y-3">
          <div
            className={'text-sm ' + (ok ? 'text-green-700' : 'text-rose-700')}
          >
            {ok ? t.correct : `${t.wrongStrict} ${word}`}
          </div>
          <button
            className="px-3 py-2 rounded-xl border"
            onClick={() => onAnswer(ok)}
          >
            {t.next}
          </button>
        </div>
      )}
    </div>
  );
}

function TypeIn({
  word,
  hintParts,
  t,
  onAnswer,
}: {
  word: string;
  hintParts: { trans: string; mask: string };
  t: (typeof LANG)['ru'];
  onAnswer: (ok: boolean) => void;
}) {
  const [value, setValue] = useState('');
  const [checked, setChecked] = useState(false);
  const ok = value.trim().toLowerCase() === word.toLowerCase();

  return (
    <div className="p-4 rounded-2xl border bg-white space-y-3">
      <div className="text-sm font-medium">{t.type_title}</div>

      {/* –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥; ¬´–º–∞—Å–∫–∞¬ª —É—Ö–æ–¥–∏—Ç –≤ placeholder */}
      <div className="text-xs text-gray-600">
        {hintParts.trans && (
          <div>
            <span className="font-medium">{t.trans}:</span> {hintParts.trans}
          </div>
        )}
      </div>

      <input
        className="w-full rounded-xl border px-3 py-2"
        value={value}
        onChange={(e) => setValue(e.target.value)}
        placeholder={hintParts.mask}
      />

      {!checked ? (
        <button
          className="px-3 py-2 rounded-xl bg-blue-600 text-white"
          onClick={() => setChecked(true)}
        >
          {t.check}
        </button>
      ) : (
        <div className="space-y-3">
          <div
            className={'text-sm ' + (ok ? 'text-green-700' : 'text-rose-700')}
          >
            {ok ? t.correct : `${t.wrongStrict} ${word}`}
          </div>
          <button
            className="px-3 py-2 rounded-xl border"
            onClick={() => onAnswer(ok)}
          >
            {t.next}
          </button>
        </div>
      )}
    </div>
  );
}
